{"version":3,"sources":["Dashboard/Brand.js","Dashboard/Container.js","Dashboard/GlobalStyle.js","Dashboard/Card.js","Dashboard/Data.js","Dashboard/Chart.js","Dashboard/Table.js","Dashboard/DarkSwitch.js","Dashboard/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Brand","Container","styled","div","lightGrey","medGrey","brandColor","darkerGrey","GlobalStyle","createGlobalStyle","dark","Card","height","generateData","count","start","growth","data","i","push","Math","floor","random","chartData","name","color","format","num","tableRows","map","month","phones","services","laptops","tablets","tableColumns","width","label","dataKey","numeric","getOptions","chart","type","backgroundColor","style","fontFamily","title","text","xAxis","labels","categories","yAxis","gridLineColor","min","reversedStacks","fontSize","tooptip","pointFormat","shared","plotOptions","series","borderWidth","column","stacking","legend","itemStyle","Chart","useContext","ThemeContext","theme","highcharts","Highcharts","options","TableCell","header","align","ReactVirtualizedTable","cellRenderer","cellData","columnIndex","props","columns","headerRenderer","this","rowHeight","headerHeight","rowCount","length","rowGetter","index","rowStyle","borderBottom","boxSizing","gridStyle","outline","other","headerProps","React","Component","VirtualizedTable","DarkSwitchContainer","Input","input","Label","DarkSwitch","setTheme","onChange","e","target","checked","createContext","Dashboard","themeState","useState","Provider","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f4b30ae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport function Brand() {\r\n    return (\r\n        <h1> Business Corp </h1>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  position: relative;\r\n  max-width: 1200px;\r\n  margin: auto;\r\n\r\n  @media (max-width: 1200px) {\r\n    margin: 40px 20px;\r\n    font-size: 12px;\r\n  }\r\n`;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const black = '#252020'\r\nexport const darkGrey = \"#515263\";\r\nexport const lightGrey = \"#f7f7f7\";\r\nexport const medGrey = '#dad9d9';\r\nexport const brandColor = '#1DDA65';\r\nexport const darkerGrey = '#353131';\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nbody {\r\n    h1 {\r\n        ${({dark}) => (dark && `color: ${brandColor};`)};\r\n    }\r\n    color: ${darkGrey};\r\n    background-color: ${({dark}) => dark ? black : lightGrey};\r\n    font-family: 'Blinker', sans-serif;\r\n}\r\n\r\n`\r\n\r\n","import styled from 'styled-components';\r\nimport { medGrey, darkerGrey } from './GlobalStyle'\r\n\r\nexport const Card = styled.div`\r\nmargin-top: 20px;\r\npadding: 20px;\r\nbackground-color: ${({dark}) => dark ? darkerGrey : 'white'};\r\nbox-shadow: 0px 3px 5px ${({dark}) => (dark ? 'black' : medGrey)};\r\nbox-sizing: border-box;\r\n${({height}) => height && `height: ${height}px;`}\r\n\r\n@media (max-width: 1200px) {\r\n    padding: 10px;\r\n}\r\n\r\n`","function generateData(count, start, growth) {\r\n  // create an empty\r\n  const data = [];\r\n  // loop over the count\r\n  for (let i = 0; i < count; i++) {\r\n    // push a random number onto the array\r\n    data.push(Math.floor(start + Math.random() * i * growth));\r\n  }\r\n  // return array\r\n  return data;\r\n}\r\n\r\nexport const chartData = [\r\n  {\r\n    name: \"Phones\",\r\n    data: generateData(12, 30, 5),\r\n    color: \"#149947\",\r\n  },\r\n  {\r\n    name: \"Services\",\r\n    data: generateData(12, 10, 0.2),\r\n    color: \"#1DDA65\",\r\n  },\r\n  {\r\n    name: \"Laptops\",\r\n    data: generateData(12, 6, 0.3),\r\n    color: \"#5CF396\",\r\n  },\r\n  {\r\n    name: \"Tablets\",\r\n    data: generateData(12, 5, 0.5),\r\n    color: \"#C1FAD7\",\r\n  },\r\n];\r\n\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nfunction format(num) {\r\n  return `$${num} Billion`;\r\n}\r\n\r\nexport const tableRows = months.map((month, i) => ({\r\n  month,\r\n  phones: format(chartData[0].data[i]),\r\n  services: format(chartData[1].data[i]),\r\n  laptops: format(chartData[2].data[i]),\r\n  tablets: format(chartData[3].data[i]),\r\n}));\r\n\r\nexport const tableColumns = [\r\n  {\r\n    width: 240,\r\n    label: \"Month\",\r\n    dataKey: \"month\",\r\n  },\r\n  {\r\n    width: 240,\r\n    label: \"Phones\",\r\n    dataKey: \"phones\",\r\n    numeric: true\r\n  },\r\n  {\r\n    width: 240,\r\n    label: \"Services\",\r\n    dataKey: \"services\",\r\n    numeric: true\r\n  },\r\n  {\r\n    width: 240,\r\n    label: \"Laptops\",\r\n    dataKey: \"laptops\",\r\n    numeric: true\r\n  },\r\n  {\r\n    width: 240,\r\n    label: \"Tablets\",\r\n    dataKey: \"tablets\",\r\n    numeric: true\r\n  },\r\n];\r\n","import React, { useContext } from \"react\";\r\nimport { Card } from \"./Card\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { chartData } from \"./Data\";\r\nimport { ThemeContext } from \"./Dashboard\";\r\nimport { darkerGrey, lightGrey } from \"./GlobalStyle\";\r\n\r\nfunction getOptions(dark) {\r\n  return {\r\n    chart: {\r\n      height: \"360px\",\r\n      type: \"column\",\r\n      backgroundColor: dark ? darkerGrey : \"white\",\r\n      style: {\r\n        fontFamily: `'Blinker', sans-serif`,\r\n      },\r\n    },\r\n    title: {\r\n      text: \"Revenue by Product\",\r\n      style: {\r\n        color: dark ? lightGrey : \"black\",\r\n      },\r\n    },\r\n    xAxis: {\r\n      labels: {\r\n        style: {\r\n          color: dark ? lightGrey : \"black\",\r\n        },\r\n      },\r\n      categories: [\r\n        \"Jan\",\r\n        \"Feb\",\r\n        \"Mar\",\r\n        \"Apr\",\r\n        \"May\",\r\n        \"Jun\",\r\n        \"Jul\",\r\n        \"Aug\",\r\n        \"Sep\",\r\n        \"Oct\",\r\n        \"Nov\",\r\n        \"Dec\",\r\n      ],\r\n    },\r\n    yAxis: {\r\n      gridLineColor: dark ? \"grey\" : lightGrey,\r\n      labels: {\r\n        style: {\r\n          color: dark ? lightGrey : \"black\",\r\n        },\r\n      },\r\n      min: 0,\r\n      reversedStacks: false,\r\n      title: {\r\n        style: {\r\n          color: dark ? lightGrey : \"black\",\r\n          fontSize: \"14px\",\r\n        },\r\n        text: \"Billions of Dollars\",\r\n      },\r\n    },\r\n    tooptip: {\r\n      pointFormat:\r\n        '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage.0f}%)<br/>',\r\n      shared: true,\r\n      style: {\r\n        backgroundColor: dark ? darkerGrey : \"white\",\r\n        color: dark ? lightGrey : \"black\",\r\n      },\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        borderWidth: 0,\r\n      },\r\n      column: {\r\n        stacking: \"normal\",\r\n      },\r\n    },\r\n    legend: {\r\n      itemStyle: {\r\n        color: dark ? lightGrey : \"black\",\r\n      },\r\n    },\r\n    series: chartData,\r\n  };\r\n}\r\n\r\nexport function Chart() {\r\n  const [theme, setTheme] = useContext(ThemeContext);\r\n  const dark = theme === \"dark\";\r\n  return (\r\n    <Card height={400} dark={dark}>\r\n      <HighchartsReact highcharts={Highcharts} options={getOptions(dark)} />\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Card } from \"./Card\";\r\nimport { tableRows, tableColumns } from \"./Data\";\r\nimport \"react-virtualized/styles.css\";\r\nimport { AutoSizer, Column, Table } from \"react-virtualized\";\r\nimport { medGrey } from \"./GlobalStyle\";\r\nimport { ThemeContext } from \"./Dashboard\";\r\nimport { brandColor } from './GlobalStyle';\r\n\r\n\r\nconst ROW_HEIGHT = 48;\r\n\r\nconst TableCell = styled.div`\r\n  display: flex;\r\n  color: ${({header, dark}) => dark ? (header ? brandColor : 'white') : 'black'};\r\n  ${({ align }) => align === \"right\" && `flex-direction: row-reverse`};\r\n`;\r\n\r\nclass ReactVirtualizedTable extends React.Component {\r\n  cellRenderer = ({ cellData, columnIndex }) => {\r\n    const { columns, dark } = this.props;\r\n    return (\r\n      <TableCell dark={dark} align={columns[columnIndex].numeric ? \"right\" : \"left\"}>\r\n        {cellData}\r\n      </TableCell>\r\n    );\r\n  };\r\n  headerRenderer = ({ label, columnIndex }) => {\r\n    const { columns, dark } = this.props;\r\n    return (\r\n      <TableCell dark={dark} header align={columns[columnIndex].numeric ? \"right\" : \"left\"}>\r\n        <span>{label}</span>\r\n      </TableCell>\r\n    );\r\n  };\r\n  render() {\r\n    const { columns, dark } = this.props;\r\n    return (\r\n      <AutoSizer>\r\n        {({ height, width }) => (\r\n          <Table\r\n            height={height}\r\n            width={width}\r\n            rowHeight={ROW_HEIGHT}\r\n            headerHeight={ROW_HEIGHT}\r\n            rowCount={tableRows.length}\r\n            rowGetter={({ index }) => tableRows[index]}\r\n            rowStyle={{\r\n              borderBottom: `1px solid ${dark ? 'grey' : medGrey}`,\r\n              boxSizing: 'border-box',\r\n            }}\r\n            gridStyle={{ outline: 0 }}\r\n          >\r\n            {columns.map(({ dataKey, ...other }, index) => {\r\n              return (\r\n                <Column\r\n                  key={dataKey}\r\n                  dataKey={dataKey}\r\n                  headerRenderer={(headerProps) =>\r\n                    this.headerRenderer({\r\n                      ...headerProps,\r\n                      columnIndex: index,\r\n                    })\r\n                  }\r\n                  cellRenderer={this.cellRenderer}\r\n                  {...other}\r\n                />\r\n              );\r\n            })}\r\n          </Table>\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\nexport function VirtualizedTable() {\r\n  const [theme, setTheme] = useContext(ThemeContext);\r\n  const dark = theme === \"dark\";\r\n  return (\r\n    <Card height={400} dark={dark}>\r\n      <ReactVirtualizedTable dark={dark} columns={tableColumns} />\r\n    </Card>\r\n  );\r\n}\r\n","import React, {useContext} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ThemeContext } from './Dashboard';\r\n\r\nconst DarkSwitchContainer = styled.div`\r\n  position: absolute;\r\n  right: 0px;\r\n  top: 20px;\r\n`;\r\nconst Input = styled.input``;\r\nconst Label = styled.label`\r\n  cursor: pointer;\r\n  color: ${({dark}) => dark ? 'grey' : 'black'};\r\n`;\r\n\r\nexport function DarkSwitch() {\r\n    const [theme, setTheme] = useContext(ThemeContext);\r\n    const dark = theme === 'dark';\r\n  return (\r\n    <div>\r\n      <DarkSwitchContainer>\r\n        <Label dark={dark}>\r\n          <Input type=\"checkbox\" onChange={e => {\r\n              setTheme(e.target.checked ? 'dark' : 'light');\r\n            \r\n            }}\r\n            checked={dark}\r\n              />\r\n          Dark Mode\r\n        </Label>\r\n      </DarkSwitchContainer>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, createContext } from \"react\";\r\nimport { Brand } from \"./Brand\";\r\nimport { Container } from \"./Container\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport { Chart } from './Chart'\r\nimport {VirtualizedTable} from './Table'\r\nimport { DarkSwitch } from './DarkSwitch';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\n\r\n\r\nexport function Dashboard() {\r\n  const themeState = useState('light');\r\n  const [theme, setTheme] = themeState;\r\n  const dark = theme === 'dark';\r\n\r\n\r\n  return (\r\n    <ThemeContext.Provider value={themeState}>\r\n      <GlobalStyle dark={dark} />\r\n      <Container>\r\n        <Brand />\r\n        <DarkSwitch/>\r\n        <Chart/>\r\n        <VirtualizedTable/>\r\n       \r\n      </Container>\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n","import React from 'react'\nimport {Dashboard} from './Dashboard/Dashboard';\n\n\nfunction App() {\n  return (\n   <Dashboard/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}